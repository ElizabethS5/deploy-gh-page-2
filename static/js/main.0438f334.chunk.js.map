{"version":3,"sources":["components/form/Form.js","components/instructions2/Instructions2.js","components/instructions/Instructions.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","type","name","placeholder","onChange","update","Instructions2","openingTag","repo","Fragment","Instructions","App","event","formData","state","target","value","setState","ghname","className","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+UAsBeA,MAnBf,SAAcC,GACZ,OACE,8BACE,2BACEC,KAAK,OACLC,KAAK,SACLC,YAAY,kBACZC,SAAUJ,EAAMK,SAElB,2BACEJ,KAAK,OACLC,KAAK,OACLC,YAAY,mBACZC,SAAUJ,EAAMK,W,MCETC,MAhBf,SAAuBN,GACrB,IAAIO,EAAa,6BAA+BP,EAAMQ,KAAO,MAG7D,OACE,kBAAC,IAAMC,SAAP,KACE,+DACA,2FACA,6BACGF,EADH,IACe,6BADf,IANM,UAMN,IAC4B,6BANf,sBC4BJG,MA7Bf,SAAsBV,GACpB,OACE,6BACE,qCACA,+CACA,gEAEA,gEACA,oDACuBA,EAAME,KAD7B,cAEGF,EAAMQ,KAFT,KAKA,8DACA,6DAEE,6BAFF,iCAMA,0CACA,sFACA,+CACA,+CACA,kBAAC,EAAD,CAAeA,KAAMR,EAAMQ,SCSlBG,E,kDA/Bb,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IAURK,OAAS,SAACO,GACR,IAAIC,EAAQ,eAAQ,EAAKC,MAAMD,UAC/BA,EAASD,EAAMG,OAAOb,MAAQU,EAAMG,OAAOC,MAC3C,EAAKC,SAAS,CAAEJ,cAXhB,EAAKC,MAAQ,CACXD,SAAU,CACRK,OAAQ,oBACRV,KAAM,uBANO,E,qDAkBjB,OACE,yBAAKW,UAAU,OACb,uEACA,kBAAC,EAAD,CAAMd,OAAQe,KAAKf,SACnB,kBAAC,EAAD,CACEH,KAAMkB,KAAKN,MAAMD,SAASK,OAC1BV,KAAMY,KAAKN,MAAMD,SAASL,Y,GAzBlBa,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0438f334.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Form.css\";\n\nfunction Form(props) {\n  return (\n    <form>\n      <input\n        type=\"text\"\n        name=\"ghname\"\n        placeholder=\"GitHub Username\"\n        onChange={props.update}\n      />\n      <input\n        type=\"text\"\n        name=\"repo\"\n        placeholder=\"GitHub repo name\"\n        onChange={props.update}\n      />\n    </form>\n  );\n}\n\nexport default Form;\n","import React from \"react\";\n\nfunction Instructions2(props) {\n  let openingTag = '<BrowserRouter basename=\"/' + props.repo + '\" >';\n  let app = \"<App />\";\n  let closingTag = \"</BrowserRouter>\";\n  return (\n    <React.Fragment>\n      <h2>For apps that use BrowserRouter</h2>\n      <p>In the index.js file, add basename property to BrowserRouter</p>\n      <pre>\n        {openingTag} <br /> {app} <br />\n        {closingTag}\n      </pre>\n    </React.Fragment>\n  );\n}\n\nexport default Instructions2;\n","import React from \"react\";\nimport \"./Instructions.css\";\nimport Instructions2 from \"../instructions2/Instructions2\";\n\nfunction Instructions(props) {\n  return (\n    <div>\n      <h2>Setup</h2>\n      <p>In the terminal:</p>\n      <pre>npm install gh-pages --save-dev</pre>\n\n      <p>In package.json JSON object, add:</p>\n      <pre>\n        \"homepage\": \"http://{props.name}.github.io/\n        {props.repo}\"\n      </pre>\n\n      <p>In package.json \"scripts\", add:</p>\n      <pre>\n        \"predeploy\": \"npm run build\",\n        <br />\n        \"deploy\": \"gh-pages -d build\"\n      </pre>\n\n      <h2>Deployment</h2>\n      <p>Add, commit, and push changes to your GitHub repository</p>\n      <p>In the terminal:</p>\n      <pre>npm run deploy</pre>\n      <Instructions2 repo={props.repo} />\n    </div>\n  );\n}\n\nexport default Instructions;\n","import React from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/form/Form\";\nimport Instructions from \"./components/instructions/Instructions\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {\n        ghname: \"<github username>\",\n        repo: \"<github repo name>\",\n      },\n    };\n  }\n\n  update = (event) => {\n    let formData = { ...this.state.formData };\n    formData[event.target.name] = event.target.value;\n    this.setState({ formData });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Make a GitHub Page for Create-React-App</h1>\n        <Form update={this.update} />\n        <Instructions\n          name={this.state.formData.ghname}\n          repo={this.state.formData.repo}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}